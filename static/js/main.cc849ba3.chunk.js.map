{"version":3,"sources":["getWeb3.js","Common.js","components/CurrentStatusComponent.js","components/InformationsComponent.js","components/VotingComponents.js","components/ResultsComponent.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","WorkflowStatusLabel","CurrentStatusComponent","props","useContext","providerContext","currentState","statusContext","useEffect","map","status","index","className","InformationsComponent","useState","isOwner","voter","voterContext","accounts","Card","style","width","Header","Body","isRegistered","hasVoted","VotingComponents","winner","winnerContext","proposals","setProposals","address","setAddress","proposal","setProposal","contract","getPastEvents","fromBlock","toBlock","error","events","idProposal","returnValues","proposalId","methods","call","proposalResponse","proposalToAdd","proposalDescription","description","indexOf","registerVoter","voterToregister","send","from","on","receipt","startProposalsRegistration","registerProposal","proposalToSubmit","endProposalsRegistration","startVotingSession","vote","endVotingSession","tallyVotes","display","justifyContent","Form","Group","value","onChange","e","target","placeholder","maxLength","Button","onClick","align-items","duplicateCheck","data","some","push","getDistinctProposals","bind","getContent","ResultsComponent","winnerProposalDescription","winnerProposalId","winnerVoteCount","createContext","votedProposalId","proposalsContext","MainComponent","setIsOwner","setCurrentState","setVoter","setWinner","getCurrentVotingStatus","getOwner","getVoter","getWinner","WorkflowStatusChanged","event","newStatus","Voted","voters","voterObject","owner","winnerResponse","state","class","Provider","App","setProvider","initialize","location","reload","alert","callWeb3","eth","getAccounts","callAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4yzcAqCeA,EAnCC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DAE1BF,OAAOG,SAFmB,wBAGtBC,EAAO,IAAIC,IAAKL,OAAOG,UAHD,kBAMpBH,OAAOG,SAASG,SANI,OAQ1BR,EAAQM,GARkB,gDAU1BL,EAAO,EAAD,IAVoB,gCAcrBC,OAAOI,MAERA,EAAOJ,OAAOI,KACpBG,QAAQC,IAAI,2BACZV,EAAQM,KAIFK,EAAW,IAAIJ,IAAKK,UAAUC,aAClC,yBAEIP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDACZV,EAAQM,IA3BoB,8DCIvBQ,G,cAAsB,CAC/B,qBACA,iCACA,+BACA,yBACA,uBACA,kBCwBWC,EAlCgB,SAACC,GAC/B,IAAML,EAAWM,qBAAWC,GACtBC,EAAeF,qBAAWG,GAKhC,OAHAC,qBAAU,cACP,CAACF,IAEAR,EAIH,6BACC,6BACA,+BACC,+BACC,4BACEG,EAAoBQ,KAAI,SAACC,EAAQC,GAAT,OACxB,4BACC,0BAAMC,UAAWD,GAASL,EAAe,gBAAkB,oBAA3D,OAEEI,EAFF,eAUL,8BApBM,M,QCoCMG,EA5Ce,SAACV,GAC3B,IAAML,EAAWM,qBAAWC,GADS,EAEVS,mBAASX,EAAMY,SAFL,mBAEjCA,EAFiC,KAG/BC,GAH+B,KAGvBZ,qBAAWa,IAE5B,IAAInB,IAAaA,EAASoB,WAAaF,EACtC,OAAO,KAwBR,OACO,6BACI,kBAACG,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,OAAN,KAAa,iDACb,kBAACH,EAAA,EAAKI,KAAN,KAzBLR,EAEK,wDAIDC,EAAMQ,aAED,6BACI,mEACA,6BACA,8BAAQR,EAAMS,SAAW,iBAAmB,mBAKpD,uEAWI,6BACA,0BAAMb,UAAU,gBAAhB,WAAwCd,EAASoB,SAAS,GAA1D,S,0BCiSLQ,EApUU,SAACvB,GACtB,IAAML,EAAWM,qBAAWC,GADI,EAELS,mBAASX,EAAMY,SAFV,mBAE5BA,EAF4B,KAG1BT,GAH0B,KAGXF,qBAAWG,IAC7BS,EAAQZ,qBAAWa,GACnBU,EAASvB,qBAAWwB,GALS,EAMDd,mBAAS,IANR,mBAM5Be,EAN4B,KAMjBC,EANiB,OAOLhB,mBAAS,MAPJ,mBAO5BiB,EAP4B,KAOnBC,EAPmB,OAQAlB,mBAAS,MART,mBAQzBmB,EARyB,KAQfC,EARe,KAahC1B,qBAAU,WACZ,sBAAC,sBAAAjB,EAAA,sEACeO,EAASqC,SAASC,cAAc,qBAAqB,CAACC,UAAW,EAAGC,QAAS,UAA7E,uCACF,WAAOC,EAAOC,GAAd,SAAAjD,EAAA,sDACQgD,GAClBC,EAAO/B,IAAP,uCAAW,WAAOwB,GAAP,mBAAA1C,EAAA,6DACiBkD,EAAaR,EAASS,aAAaC,WADpD,SAE0C7C,EAASqC,SAASS,QAAQf,UAAUY,GAAYI,OAF1F,OAEiBC,EAFjB,OAGJC,EAAgB,CAACJ,WAAYF,EAAYO,oBAAqBF,EAAiBG,aAChErD,QAAQC,IAAI,SAAYgC,EAAUqB,QAAQH,EAAcE,cAC7EnB,GAAa,SAAAD,GAAS,4BAAQA,GAAR,CAAmBkB,OAL/B,2CAAX,uDAFU,2CADE,yDADf,0CAAD,KA6BE,CAACzC,EAAcqB,EAAQX,IAE1B,IAWSmC,EAAa,uCAAG,4BAAA5D,EAAA,yDACT,KAAZwC,EADqB,uBAEjBqB,EAAkBrB,EACfnC,QAAQC,IAAI,qBAAwBuD,GAHtB,SAIjBtD,EAASqC,SAASS,QAAQO,cAAcC,GAAiBC,KAAK,CAACC,KAAMxD,EAASoB,SAAS,KAC5FqC,GAAG,WAAU,SAASC,GACtB5D,QAAQC,IAAI2D,GACAxB,EAAW,OAEvBuB,GAAG,SAAQ,SAAShB,EAAOiB,GAC3B5D,QAAQC,IAAI0C,GACZ3C,QAAQC,IAAI2D,MAXU,2CAAH,qDAgBhBC,EAA0B,uCAAG,sBAAAlE,EAAA,sEAC5BO,EAASqC,SAASS,QAAQa,6BAA6BJ,KAAK,CAACC,KAAMxD,EAASoB,SAAS,KAC1FqC,GAAG,WAAU,SAASC,GACtB5D,QAAQC,IAAI2D,MAGZD,GAAG,SAAQ,SAAShB,EAAOiB,GAC3B5D,QAAQC,IAAI0C,GACZ3C,QAAQC,IAAI2D,MARqB,2CAAH,qDAYvBE,EAAgB,uCAAG,4BAAAnE,EAAA,yDACZ,IAAZ0C,EADwB,uBAEX0B,EAAmB1B,EAFR,SAGpBnC,EAASqC,SAASS,QAAQc,iBAAiBC,GAAkBN,KAAK,CAACC,KAAMxD,EAASoB,SAAS,KAChGqC,GAAG,WAAU,SAASC,GACtB5D,QAAQC,IAAI2D,GACAtB,EAAY,OAExBqB,GAAG,SAAQ,SAAShB,EAAOiB,GAC3B5D,QAAQC,IAAI0C,GACZ3C,QAAQC,IAAI2D,MAVa,2CAAH,qDAenBI,EAAwB,uCAAG,sBAAArE,EAAA,sEAC1BO,EAASqC,SAASS,QAAQgB,2BAA2BP,KAAK,CAACC,KAAMxD,EAASoB,SAAS,KACxFqC,GAAG,WAAU,SAASC,GACtB5D,QAAQC,IAAI2D,MAEZD,GAAG,SAAQ,SAAShB,EAAOiB,GAC3B5D,QAAQC,IAAI0C,GACZ3C,QAAQC,IAAI2D,MAPmB,2CAAH,qDAWxBK,EAAkB,uCAAG,sBAAAtE,EAAA,sEACpBO,EAASqC,SAASS,QAAQiB,qBAAqBR,KAAK,CAACC,KAAMxD,EAASoB,SAAS,KAClFqC,GAAG,WAAU,SAASC,GACtB5D,QAAQC,IAAI2D,MAEZD,GAAG,SAAQ,SAAShB,EAAOiB,GAC3B5D,QAAQC,IAAI0C,GACZ3C,QAAQC,IAAI2D,MAPa,2CAAH,qDAYfM,EAAI,uCAAG,WAAOnB,GAAP,SAAApD,EAAA,sEACTO,EAASqC,SAASS,QAAQkB,KAAKnB,GAAYU,KAAK,CAACC,KAAMxD,EAASoB,SAAS,KAC9EqC,GAAG,WAAU,SAASC,GACtB5D,QAAQC,IAAI2D,MAEZD,GAAG,SAAQ,SAAShB,EAAOiB,GAC3B5D,QAAQC,IAAI0C,GACZ3C,QAAQC,IAAI2D,MAPE,2CAAH,sDAWPO,EAAgB,uCAAG,sBAAAxE,EAAA,sEAClBO,EAASqC,SAASS,QAAQmB,mBAAmBV,KAAK,CAACC,KAAMxD,EAASoB,SAAS,KAChFqC,GAAG,WAAU,SAASC,GACtB5D,QAAQC,IAAI2D,MAGZD,GAAG,SAAQ,SAAShB,EAAOiB,GAC3B5D,QAAQC,IAAI0C,GACZ3C,QAAQC,IAAI2D,MARW,2CAAH,qDAYbQ,EAAU,uCAAG,sBAAAzE,EAAA,sEACfO,EAASqC,SAASS,QAAQoB,aAAaX,KAAK,CAACC,KAAMxD,EAASoB,SAAS,KAC1EqC,GAAG,UADE,uCACS,WAAOC,GAAP,SAAAjE,EAAA,sDACdK,QAAQC,IAAI2D,GADE,2CADT,uDAILD,GAAG,SAAQ,SAAShB,EAAOiB,GAC3B5D,QAAQC,IAAI0C,GACZ3C,QAAQC,IAAI2D,MAPQ,2CAAH,qDAWnB,GAAoB,MAAjBrD,EAAMY,UAAoBT,IAAiBU,EAC7C,OAAO,KA2JR,OACW,6BACR,kBAACG,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACrB,kBAACF,EAAA,EAAKG,OAAN,KAAa,2CACb,kBAACH,EAAA,EAAKI,KAAN,KA7Je,WACZ,OAAOjB,GACZ,IAAK,IACQ,OAAGS,EAEK,yBAAKK,MAAO,CAAC6C,QAAS,OAAQC,eAAgB,WAC1C,kBAAC/C,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,OAAN,KAAa,mDACb,kBAACH,EAAA,EAAKI,KAAN,KACI,kBAAC4C,EAAA,EAAKC,MAAN,KACI,2BAAOC,MAAOtC,EAASuC,SAAU,SAACC,GAAD,OAAOvC,EAAWuC,EAAEC,OAAOH,QAAQI,YAAY,4BAA4BC,UAAU,QACtH,kBAACC,EAAA,EAAD,CAAQC,QAASzB,GAAjB,SACU,MAKtB,kBAAChC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,OAAN,KAAa,8CACb,kBAACH,EAAA,EAAKI,KAAN,KACI,kBAACoD,EAAA,EAAD,CAAQC,QAAUnB,GAAlB,qCAOZ,iFAErB,IAAK,IACQ,OAAG1C,EAEd,yBAAKK,MAAO,CAAC6C,QAAS,OAAQC,eAAgB,WAC7C,kBAAC/C,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACrB,kBAACF,EAAA,EAAKG,OAAN,KAAa,8CACb,kBAACH,EAAA,EAAKI,KAAN,KACC,kBAACoD,EAAA,EAAD,CAAQC,QAAUhB,GAAlB,mCAOgB,yBAAKxC,MAAO,CAAC6C,QAAS,OAAQC,eAAgB,WAC1C,kBAAC/C,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,OAAN,KAAa,sDACb,kBAACH,EAAA,EAAKI,KAAN,KACI,kBAAC4C,EAAA,EAAKC,MAAN,KACI,2BAAOC,MAAOpC,EAAUqC,SAAU,SAACC,GAAD,OAAOrC,EAAYqC,EAAEC,OAAOH,QAAQI,YAAY,iBAAiBC,UAAU,QAC7G,kBAACC,EAAA,EAAD,CAAQC,QAAUlB,GAAlB,SACU,OAK9C,IAAK,IACW,OAAG3C,EAEjB,yBAAKK,MAAO,CAAC6C,QAAS,OAAQC,eAAgB,WAC7C,kBAAC/C,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACrB,kBAACF,EAAA,EAAKG,OAAN,KAAa,yDACb,kBAACH,EAAA,EAAKI,KAAN,KACC,kBAACoD,EAAA,EAAD,CAAQC,QAAUf,GAAlB,WAOe,gEAEpB,IAAK,IACW,OAAG9C,EAEjB,yBAAKK,MAAO,CAAC6C,QAAS,OAAQC,eAAgB,WAC7C,kBAAC/C,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACrB,kBAACF,EAAA,EAAKG,OAAN,KAAa,uDACb,kBAACH,EAAA,EAAKI,KAAN,KACC,kBAACoD,EAAA,EAAD,CAAQC,QAAUb,GAAlB,WAKoBlC,EAMDb,GAASA,EAAMS,SAGf,wDAGfT,IAAUA,EAAMQ,aAGD,8DAKA,yBAAKJ,MAAO,CAAC6C,QAAS,OAAQC,eAAgB,WAC1C,kBAAC/C,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,OAAN,KAAa,0DACb,kBAACH,EAAA,EAAKI,KAAN,KACA,2BAAOF,MAAM,MAAM4C,QAAQ,OAAOY,cAAY,UAC1C,+BACI,4BACI,6BACpC,8BAED,8BAE6B,+BArOV,SAACrC,GAE7B,IAAMsC,EAAiB,GAMvB,OALAtC,EAAO/B,KAAI,SAACsE,EAAMpE,GACZmE,EAAeE,MAAK,SAAAT,GAAC,OAAIA,EAAE5B,YAAcoC,EAAKpC,eAClDmC,EAAeG,KAAKF,MAGfD,EA6NuCI,CAAqBrD,GAAWpB,KAAI,SAACwB,GAAD,OACjE,4BACA,4BAAKA,EAASe,qBACd,4BAAI,kBAAC2B,EAAA,EAAD,CAAQC,QAASd,EAAKqB,U,EAAWlD,EAASU,aAA1C,oBAhCK,yDA0CxB,IAAK,IACW,OAAG5B,EAEjB,yBAAKK,MAAO,CAAC6C,QAAS,OAAQC,eAAgB,WAC7C,kBAAC/C,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACrB,kBAACF,EAAA,EAAKG,OAAN,KAAa,gDACb,kBAACH,EAAA,EAAKI,KAAN,KACC,kBAACoD,EAAA,EAAD,CAAQC,QAAUZ,GAAlB,WAOe,0DAER,IAAK,IACD,OACI,oDAErB,QACC,OAAO,MAScoB,OCtSVC,EA1BU,SAAClF,GACtB,IAAMwB,EAASvB,qBAAWwB,GACpBtB,EAAeF,qBAAWG,GAKnC,OAHGC,qBAAU,cACV,CAACmB,IAEArB,GAAgC,GAAhBA,GAAsBqB,GAAWA,EAAO2D,0BAIrD,6BACI,kBAACnE,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,OAAN,KAAa,kDACb,kBAACH,EAAA,EAAKI,KAAN,KACI,8BAAM,gCAASI,EAAO4D,iBAAmB,gBAAkB,GAArD,KAAN,IAA0E5D,EAAO4D,iBAAjF,KACA,6BACA,8BAAM,gCAAS5D,EAAO4D,iBAAmB,yBAA2B,IAApE,IAAkF5D,EAAO2D,0BAAzF,KACA,6BACA,8BAAM,gCAAS3D,EAAO4D,iBAAmB,eAAiB,IAA1D,IAAwE5D,EAAO6D,gBAA/E,QAXX,MCLIvE,EAAewE,wBAAc,CAACjE,cAAc,EAAOC,UAAU,EAAOiE,gBAAiB,OACrFnF,EAAgBkF,wBAAc,CAACnF,aAAc,OAC7CqF,EAAmBF,wBAAc,IACjC7D,EAAgB6D,0BAyIdG,EAvIO,SAACzF,GACnB,IAAML,EAAWM,qBAAWC,GADC,EAECS,mBAAS,MAFV,mBAEtBC,EAFsB,KAEb8E,EAFa,OAGW/E,mBAAS,MAHpB,mBAGtBR,EAHsB,KAGRwF,EAHQ,OAIHhF,mBAAS,MAJN,mBAItBE,EAJsB,KAIf+E,EAJe,OAKDjF,mBAAS,MALR,mBAKtBa,EALsB,KAKdqE,EALc,OAMKlF,mBAAS,IANd,mBAMtBe,EANsB,UAQhCrB,oBAAS,sBAAC,sBAAAjB,EAAA,sEACG0G,IADH,uBAGHC,IAHG,uBAKGC,IALH,uBAOGC,IAPH,OASHtG,EAASqC,SAASK,OAAO6D,sBAAsB,MAAM,SAAC9D,EAAO+D,GACrD/D,IACA3C,QAAQC,IAAI,yBACZiG,EAAgBQ,EAAM5D,aAAa6D,WACnCH,QAGRtG,EAASqC,SAASK,OAAOgE,MAAM,MAAM,SAACjE,EAAO+D,GACzC,IAAI/D,EAAM,CACN3C,QAAQC,IAAI,SACZ,IAAM4B,EAAY6E,EAAM5D,aAAa1B,OAASlB,EAASoB,SAAS,GAChE6E,EAAS,CAACtE,SAAUA,QApBzB,4CAsCP,IAIA,IAAM0E,EAAQ,uCAAG,4BAAA5G,EAAA,+EAEeO,EAASqC,SAASS,QAAQ6D,OAAO3G,EAASoB,SAAS,IAAI2B,KAAK,CAACS,KAAMxD,EAASoB,SAAS,KAFpG,OAELwF,EAFK,OAGXX,EAASW,GAHE,gDAMR,EAAH,IACE9G,QAAQC,IAAR,MAPS,yDAAH,qDAYRqG,EAAQ,uCAAG,4BAAA3G,EAAA,+EAEWO,EAASqC,SAASS,QAAQ+D,QAAQ9D,OAF7C,OAEH8D,EAFG,OAGTd,EAAWc,IAAU7G,EAASoB,SAAS,IAH9B,gDAMR,EAAH,IACEtB,QAAQC,IAAR,MAPS,yDAAH,qDAYRuG,EAAS,uCAAG,4BAAA7G,EAAA,+EAGmBO,EAASqC,SAASS,QAAQwD,YAAYvD,OAHzD,OAGJ+D,EAHI,OAIVZ,EAAUY,GAJA,gDAOT,EAAH,KACEhH,QAAQC,IAAR,MACAmG,EAAU,CAACV,0BAA2B,4BAT5B,yDAAH,qDAcTW,EAAsB,uCAAG,4BAAA1G,EAAA,+EAEHO,EAASqC,SAASS,QAAQqD,yBAAyBpD,OAFhD,UAEjBgE,EAFiB,OAGvBf,EAAgBe,GACJ,KAATA,EAJoB,gCAMbT,IANa,yDASvBxG,QAAQC,IAAR,MATuB,0DAAH,qDAa5B,OAAKC,GAAaQ,GAA2B,MAAXS,EAI9B,6BACI,yBAAK+F,MAAM,cACP,8CAEJ,kBAAClF,EAAcmF,SAAf,CAAwB1C,MAAO1C,GAC3B,kBAACtB,EAAgB0G,SAAjB,CAA0B1C,MAAOvE,GAC7B,kBAACS,EAAcwG,SAAf,CAAwB1C,MAAO/D,GAC3B,kBAACqF,EAAiBoB,SAAlB,CAA2B1C,MAAOxC,GAC9B,kBAACZ,EAAa8F,SAAd,CAAuB1C,MAAOrD,GAC1B,yBAAKI,MAAO,CAAC6C,QAAS,OAAQC,eAAgB,WAC1C,kBAAC,EAAD,CAAwBnD,QAASA,EAAST,aAAcA,EAAcU,MAAOA,KAEjF,yBAAKI,MAAO,CAAC6C,QAAS,OAAQC,eAAgB,WAC1C,kBAAC,EAAD,CAAuBnD,QAASA,EAASC,MAAOA,KAEpD,yBAAKI,MAAO,CAAC6C,QAAS,OAAQC,eAAgB,WAC1C,kBAAC,EAAD,CAAkBnD,QAASA,EAAST,aAAcA,EAAcuB,UAAWA,EAAWb,MAAOA,EAAOW,OAAQA,KAEhH,yBAAKP,MAAO,CAAC6C,QAAS,OAAQC,eAAgB,WAC1C,kBAAC,EAAD,CAAkBvC,OAAQA,WAtB/C,MC3GFtB,EAAkBoF,wBAAc,CAAChG,KAAM,KAAMyB,SAAU,KAAMiB,SAAU,OAgFrE6E,EA9EH,WAAM,MAKgBlG,qBALhB,mBAKThB,EALS,KAKCmH,EALD,KAOhBzG,oBAAS,sBAAE,sBAAAjB,EAAA,+EAEL2H,IAFK,OAaX7H,OAAOG,SAAS+D,GAAG,kBAAnB,sBAAsC,sBAAAhE,EAAA,sDACrCK,QAAQC,IAAI,mBACZR,OAAO8H,SAASC,SAFqB,4CAb3B,gDAmBXC,MAAM,0EAGLzH,QAAQ2C,MAAR,MAtBU,yDAwBT,IAEH,IAAM2E,EAAU,uCAAG,oCAAA3H,EAAA,6DAElBK,QAAQC,IAAI,oBAFM,SAKKZ,IALL,cAKZqI,EALY,gBAQSA,EAASC,IAAIC,cARtB,cAQZC,EARY,gBAWMH,EAASC,IAAIG,IAAIC,QAXvB,OAWZC,EAXY,OAYZC,EAAkBC,EAAeC,SAASH,GAE1CI,EAAW,IAAIV,EAASC,IAAIU,SACjCH,EAAeI,IACdL,GAAmBA,EAAgB9F,SAOrCkF,EAAY,CAACxH,KAAM6H,EAAUpG,SAAUuG,EAActF,SAAU6F,IAvB7C,4CAAH,qDA+BhB,OAAKlI,EAKH,yBAAKc,UAAU,OACd,kBAACP,EAAgB0G,SAAjB,CAA0B1C,MAAOvE,GAChC,kBAAC,EAAD,QANI,yEC9DWqI,QACW,cAA7B9I,OAAO8H,SAASiB,UAEe,UAA7B/I,OAAO8H,SAASiB,UAEhB/I,OAAO8H,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cc849ba3.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","export const WorkflowStatus = [\r\n    \"RegisteringVoters\",\r\n    \"ProposalsRegistrationStarted\",\r\n    \"ProposalsRegistrationEnded\",\r\n    \"VotingSessionStarted\",\r\n    \"VotingSessionEnded\",\r\n    \"VotesTallied\"\r\n];\r\n\r\nexport const WorkflowStatusLabel = [\r\n    \"Registering voters\",\r\n    \"Proposals registration started\",\r\n    \"Proposals registration ended\",\r\n    \"Voting session started\",\r\n    \"Voting session ended\",\r\n    \"Votes tallied\"\r\n];\r\n\r\nexport const getWorkFlowStatusKey = (status) => {\r\n    if (status == 0) return \"RegisteringVoters\";\r\n    if (status == 1) return \"ProposalsRegistrationStarted\";\r\n    if (status == 2) return \"ProposalsRegistrationEnded\";\r\n    if (status == 3) return \"VotingSessionStarted\";\r\n    if (status == 4) return \"VotingSessionEnded\";\r\n    if (status == 5) return \"VotesTallied\";\r\n    return \"undefined\";\r\n};","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { WorkflowStatusLabel} from \"../Common\";\r\nimport { statusContext } from \"./MainComponent\";\r\nimport { providerContext } from \"../App\";\r\n\r\nconst CurrentStatusComponent = (props) => {\r\n\tconst provider = useContext(providerContext);\r\n\tconst currentState = useContext(statusContext);\r\n\r\n\tuseEffect(() => {\r\n\t}, [currentState]);\r\n\r\n\tif(!provider)\r\n\t\treturn null;\t\r\n\r\n\treturn ( \r\n\t\t<div>\r\n\t\t\t<br></br>\r\n\t\t\t<table >\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t{WorkflowStatusLabel.map((status, index) => \r\n\t\t\t\t\t\t\t<td> \r\n\t\t\t\t\t\t\t\t<span className={index == currentState ? \"text-selected\" : \"text-notSelected\"}>\r\n\t\t\t\t\t\t\t\t\t&nbsp;  \r\n\t\t\t\t\t\t\t\t\t{status}  \r\n\t\t\t\t\t\t\t\t\t&nbsp; \r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t</table>\r\n\t\t\t<br></br>\r\n\t\t</div>\r\n\t\t\r\n\t);\r\n}\r\n\r\nexport default CurrentStatusComponent;","import React, { useState, useContext } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport { voterContext } from \"./MainComponent\";\r\nimport { providerContext } from \"../App\";\r\n\r\nconst InformationsComponent = (props) => {\r\n    const provider = useContext(providerContext);\r\n\tconst [isOwner, setIsOwner] = useState(props.isOwner);\r\n    const voter = useContext(voterContext);\r\n\r\n\tif(!provider || !provider.accounts || !voter)\r\n\t\treturn null;\r\n\r\n    const getContent = () => {\r\n        if(isOwner)\r\n            return (\r\n                <span >Wallet admin connected</span>\r\n            );\r\n        else\r\n        {\r\n            if(voter.isRegistered)\r\n                return (\r\n                    <div>\r\n                        <span >Registered voter wallet connected</span>\r\n                        <br></br>\r\n                        <span >{voter.hasVoted ? \" Already voted\" : \" Not voted yet\"}</span>\r\n                    </div>\r\n                );\r\n            else\r\n            return (\r\n                <span >Non registered voter wallet connected</span>\r\n            );\r\n        }\r\n    };\r\n\r\n\treturn ( \r\n        <div>\r\n            <Card style={{ width: '40rem' }}>\r\n                <Card.Header><strong>Informations</strong></Card.Header>\r\n                <Card.Body>\r\n                    {getContent()}\r\n                    <br></br>\r\n                    <span className=\"navConnected\">Address {provider.accounts[0]} </span>\r\n                </Card.Body>\t\t\r\n            </Card>\r\n        </div>\r\n\t);\r\n}\r\n\r\nexport default InformationsComponent;","import React, { Component, useState, useEffect, useContext } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { providerContext } from \"../App\";\r\nimport { statusContext, voterContext, proposalsContext, winnerContext } from \"./MainComponent\";\r\n\r\nconst VotingComponents = (props) => {\r\n    const provider = useContext(providerContext);\r\n\tconst [isOwner, setIsOwner] = useState(props.isOwner);\r\n    const currentState = useContext(statusContext);\r\n\tconst voter = useContext(voterContext);\r\n\tconst winner = useContext(winnerContext);\r\n\tconst [proposals, setProposals] = useState([]); \r\n\tconst [address, setAddress] = useState(null);\r\n    const [proposal, setProposal] = useState(null);\r\n\r\n\r\n\t\r\n\r\n    useEffect(() => {\r\n\t\t(async () => {\r\n            await provider.contract.getPastEvents('ProposalRegistered',{fromBlock: 0, toBlock: 'latest'},\r\n                async (error, events) => {\r\n                    if(!error){\r\n\t\t\t\t\t\tevents.map(async (proposal) => {\r\n                            const idProposal = proposal.returnValues.proposalId;\r\n                            const proposalResponse = await provider.contract.methods.proposals(idProposal).call();\r\n\t\t\t\t\t\t\tconst proposalToAdd = {proposalId: idProposal, proposalDescription: proposalResponse.description}\r\n                            console.log(\"Index \" +  proposals.indexOf(proposalToAdd.description));\r\n\t\t\t\t\t\t\tsetProposals(proposals => [...proposals, proposalToAdd]);  \r\n                        })\r\n                        // events.map(async (proposal) => {\r\n                        //     const idProposal = proposal.returnValues.proposalId;\r\n                        //     const proposalResponse = await provider.contract.methods.proposals(idProposal).call();\r\n\t\t\t\t\t\t// \tconst proposalToAdd = {proposalId: idProposal, proposalDescription: proposalResponse.description}\r\n                        //     console.log(\"Index \" +  proposals.indexOf(proposalToAdd.description));\r\n\t\t\t\t\t\t// \tif(proposals.indexOf(proposalToAdd.description) == \"-1\")\r\n\t\t\t\t\t\t// \t\tsetProposals(proposals => [...proposals, proposalToAdd]);  \r\n                        // })\r\n                    }\r\n                });\r\n            })();\r\n\t\t\t// (async () => {\r\n\t\t\t// \tif(currentState == '5')\r\n\t\t\t// \t{\r\n\t\t\t// \t\tconst winnerResponse = await provider.contract.methods.getWinner().call();\r\n\t\t\t// \t\tsetWinner(winnerResponse);\r\n\t\t\t// \t}\r\n\t\t\t// \t})();\r\n\t}, [currentState, winner, voter]);\r\n\r\n\tconst getDistinctProposals = (events) => \r\n\t{\t\r\n\t\tconst duplicateCheck = [];\r\n\t\tevents.map((data, index) => {\r\n\t\t\tif (!duplicateCheck.some(e => e.proposalId == data.proposalId)) {\r\n\t\t\t\tduplicateCheck.push(data);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn duplicateCheck;\r\n\t};\r\n\r\n    const registerVoter = async () => {\r\n\t\tif(address !== \"\") { // && web3.utils.isAddress(address)){\r\n\t\t\tconst voterToregister = address;\r\n            console.log(\"Voter to register \" +  voterToregister);\r\n\t\t\tawait provider.contract.methods.registerVoter(voterToregister).send({from: provider.accounts[0]})\r\n\t\t\t.on(\"receipt\",function(receipt){\r\n\t\t\t\tconsole.log(receipt);  \r\n                setAddress(\"\");\r\n\t\t\t})\r\n\t\t\t.on(\"error\",function(error, receipt){\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tconsole.log(receipt);\r\n\t\t\t});\t\t\t\r\n\t\t}\r\n    };\r\n\r\n\tconst startProposalsRegistration = async () => {\r\n\t\tawait provider.contract.methods.startProposalsRegistration().send({from: provider.accounts[0]})\r\n\t\t.on(\"receipt\",function(receipt){\r\n\t\t\tconsole.log(receipt);\r\n\t\t\t// getCurrentVotingStatus();\r\n\t\t})\r\n\t\t.on(\"error\",function(error, receipt){\r\n\t\t\tconsole.log(error);\r\n\t\t\tconsole.log(receipt);\r\n\t\t});\r\n    };\r\n\r\n    const registerProposal = async () => { \r\n\t\tif(proposal != \"\"){\r\n            const proposalToSubmit = proposal;\r\n\t\t\tawait provider.contract.methods.registerProposal(proposalToSubmit).send({from: provider.accounts[0]})\r\n\t\t\t.on(\"receipt\",function(receipt){\r\n\t\t\t\tconsole.log(receipt);\r\n                setProposal(\"\");\r\n\t\t\t})\r\n\t\t\t.on(\"error\",function(error, receipt){\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tconsole.log(receipt);\r\n\t\t\t});\t\t\t\r\n\t\t}\r\n    };\r\n\r\n\tconst endProposalsRegistration = async () => {\r\n\t\tawait provider.contract.methods.endProposalsRegistration().send({from: provider.accounts[0]})\r\n\t\t.on(\"receipt\",function(receipt){\r\n\t\t\tconsole.log(receipt);\r\n\t\t})\r\n\t\t.on(\"error\",function(error, receipt){\r\n\t\t\tconsole.log(error);\r\n\t\t\tconsole.log(receipt);\r\n\t\t});\r\n    };\r\n\r\n\tconst startVotingSession = async () => {\r\n\t\tawait provider.contract.methods.startVotingSession().send({from: provider.accounts[0]})\r\n\t\t.on(\"receipt\",function(receipt){\r\n\t\t\tconsole.log(receipt);\r\n\t\t})\r\n\t\t.on(\"error\",function(error, receipt){\r\n\t\t\tconsole.log(error);\r\n\t\t\tconsole.log(receipt);\r\n\t\t});\r\n    };\r\n\r\n\r\n    const vote = async (proposalId) => {\r\n\t\tawait provider.contract.methods.vote(proposalId).send({from: provider.accounts[0]})\r\n\t\t.on(\"receipt\",function(receipt){\r\n\t\t\tconsole.log(receipt);\r\n\t\t})\r\n\t\t.on(\"error\",function(error, receipt){\r\n\t\t\tconsole.log(error);\r\n\t\t\tconsole.log(receipt);\r\n\t\t});\r\n    };\r\n\r\n\tconst endVotingSession = async () => {\r\n\t\tawait provider.contract.methods.endVotingSession().send({from: provider.accounts[0]})\r\n\t\t.on(\"receipt\",function(receipt){\r\n\t\t\tconsole.log(receipt);\r\n\r\n\t\t})\r\n\t\t.on(\"error\",function(error, receipt){\r\n\t\t\tconsole.log(error);\r\n\t\t\tconsole.log(receipt);\r\n\t\t});\r\n    }\r\n\r\n    const tallyVotes = async () => {\r\n\t\tawait provider.contract.methods.tallyVotes().send({from: provider.accounts[0]})\r\n\t\t.on(\"receipt\", async (receipt) => {\r\n\t\t\tconsole.log(receipt);\r\n\t\t})\r\n\t\t.on(\"error\",function(error, receipt){\r\n\t\t\tconsole.log(error);\r\n\t\t\tconsole.log(receipt);\r\n\t\t});\r\n    }\r\n\r\n\tif(props.isOwner == null || !currentState || !voter)\r\n\t\treturn null;\r\n\r\n\tconst getContent = () => {\r\n        switch(currentState) {\r\n\t\t\tcase \"0\":\r\n                if(isOwner)\r\n                    return (\r\n                        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                            <Card style={{ width: '20rem' }}>\r\n                                <Card.Header><strong>Register voter</strong></Card.Header>\r\n                                <Card.Body>\r\n                                    <Form.Group>\r\n                                        <input value={address} onChange={(e) => setAddress(e.target.value)} placeholder=\"Enter address to register\" maxLength='256'></input>\r\n                                        <Button onClick={registerVoter } > Ok </Button>\r\n                                    </Form.Group>{' '}\r\n                                    \r\n                                </Card.Body>\r\n                                \r\n                            </Card>\r\n                            <Card style={{ width: '20rem' }}>\r\n                                <Card.Header><strong>Next step</strong></Card.Header>\r\n                                <Card.Body>\r\n                                    <Button onClick={ startProposalsRegistration } > start Proposals Registration </Button>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </div>\r\n                    );\r\n                else\r\n                    return(\r\n                        <span>Registering voters by administrator in progress</span>\r\n                    );\r\n\t\t\tcase \"1\":\r\n                if(isOwner)\r\n\t\t\t\treturn( \r\n\t\t\t\t\t<div style={{display: 'flex', justifyContent: 'center'}}>\r\n\t\t\t\t\t\t<Card style={{ width: '20rem' }}>\r\n\t\t\t\t\t\t\t<Card.Header><strong>Next step</strong></Card.Header>\r\n\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t<Button onClick={ endProposalsRegistration } > End proposals registration </Button>\r\n\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n                else\r\n                    return(\r\n                        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                            <Card style={{ width: '20rem' }}>\r\n                                <Card.Header><strong>Register proposal</strong></Card.Header>\r\n                                <Card.Body>\r\n                                    <Form.Group>\r\n                                        <input value={proposal} onChange={(e) => setProposal(e.target.value)} placeholder=\"Enter proposal\" maxLength='256'></input>\r\n                                        <Button onClick={ registerProposal } > Ok </Button>\r\n                                    </Form.Group>{' '}\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </div>\r\n                    );\r\n\t\t\t\tcase \"2\":\r\n                    if(isOwner)\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<div style={{display: 'flex', justifyContent: 'center'}}>\r\n\t\t\t\t\t\t\t<Card style={{ width: '20rem' }}>\r\n\t\t\t\t\t\t\t\t<Card.Header><strong>Start Voting Session</strong></Card.Header>\r\n\t\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t\t<Button onClick={ startVotingSession } > Ok </Button>\r\n\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n                    else\r\n                    return(\r\n                        <span>Register proposals in progress</span>\r\n                    );\r\n\t\t\t\tcase \"3\":\r\n                    if(isOwner)\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<div style={{display: 'flex', justifyContent: 'center'}}>\r\n\t\t\t\t\t\t\t<Card style={{ width: '20rem' }}>\r\n\t\t\t\t\t\t\t\t<Card.Header><strong>End Voting Session</strong></Card.Header>\r\n\t\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t\t<Button onClick={ endVotingSession } > Ok </Button>\r\n\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n                    else if(!proposals)\r\n                    {\r\n                        return(\r\n                            <span>No proposal to vote for</span>\r\n                        );\r\n                    }\r\n                    else if(voter && voter.hasVoted)\r\n                    {\r\n                        return(\r\n                            <span>You have already voted</span>\r\n                        );\r\n                    }\r\n\t\t\t\t\telse if(voter && !voter.isRegistered)\r\n                    {\r\n                        return(\r\n                            <span>You are not register to vote</span>\r\n                        );\r\n                    }\r\n                    else\r\n                        return( \r\n                            <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                                <Card style={{ width: '20rem' }}>\r\n                                    <Card.Header><strong>Vote for one proposal</strong></Card.Header>\r\n                                    <Card.Body>\r\n                                    <table width=\"75%\" display='flex' align-items='center'>\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th></th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th ></th>\r\n                                            </tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr></tr>\t\r\n                                        </thead>\r\n                                        <tbody>{getDistinctProposals(proposals).map((proposal) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{proposal.proposalDescription}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td><Button onClick={vote.bind(this, proposal.proposalId)} > Vote </Button></td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t\t\t</table>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\t\t\t\t\t\t    </div>\r\n                        );\r\n\t\t\t\tcase \"4\":\r\n                    if(isOwner)\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<div style={{display: 'flex', justifyContent: 'center'}}>\r\n\t\t\t\t\t\t\t<Card style={{ width: '20rem' }}>\r\n\t\t\t\t\t\t\t\t<Card.Header><strong>Tally Votes</strong></Card.Header>\r\n\t\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t\t<Button onClick={ tallyVotes } > Ok </Button>\r\n\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n                    else\r\n                    return(\r\n                        <span>Wainting for taily votes</span>\r\n                    );\r\n                case \"5\":\r\n                    return(\r\n                        <span>Voting is finished</span>\r\n                    );\r\n\t\t\tdefault:\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n\r\n\treturn ( \r\n            <div>\r\n\t\t\t\t<Card style={{ width: '40rem' }}>\r\n\t\t\t\t\t<Card.Header><strong>Voting</strong></Card.Header>\r\n\t\t\t\t\t<Card.Body>\r\n                        {getContent()}\r\n\t\t\t\t\t</Card.Body>\t\t\r\n\t\t\t\t</Card>\r\n\t\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default VotingComponents;","import React, { useEffect, useContext } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport { statusContext, winnerContext } from \"./MainComponent\";\r\n\r\nconst ResultsComponent = (props) => {\r\n    const winner = useContext(winnerContext);\r\n    const currentState = useContext(statusContext);\r\n\r\n    useEffect(() => {\r\n\t}, [winner]);\r\n\r\n\tif(!currentState || currentState != 5 || !winner || !winner.winnerProposalDescription)\r\n\t\treturn null;\r\n\r\n\treturn ( \r\n        <div>\r\n            <Card style={{ width: '40rem' }}>\r\n                <Card.Header><strong>Voting winner</strong></Card.Header>\r\n                <Card.Body>\r\n                    <span><strong>{winner.winnerProposalId ? \"Proposal Id: \" : \"\"} </strong> {winner.winnerProposalId} </span>\r\n                    <br></br>\r\n                    <span><strong>{winner.winnerProposalId ? \"Proposal description: \" : \"\"}</strong> {winner.winnerProposalDescription} </span>\r\n                    <br></br>\r\n                    <span><strong>{winner.winnerProposalId ? \"Vote count: \" : \"\"}</strong> {winner.winnerVoteCount} </span>\r\n                </Card.Body>\t\t\r\n            </Card>\r\n        </div>\r\n\t);\r\n}\r\n\r\nexport default ResultsComponent;","import React, { Component, useState, useEffect, createContext, useContext } from \"react\";\r\nimport CurrentStatusComponent from \"./CurrentStatusComponent\";\r\nimport InformationsComponent from \"./InformationsComponent\";\r\nimport VotingComponents from \"./VotingComponents\";\r\nimport ResultsComponent from \"./ResultsComponent\";\r\nimport { providerContext } from \"../App\";\r\n\r\nexport const voterContext = createContext({isRegistered: false, hasVoted: false, votedProposalId: null});\r\nexport const statusContext = createContext({currentState: null});\r\nexport const proposalsContext = createContext([]);\r\nexport const winnerContext = createContext();\r\n\r\nconst MainComponent = (props) => {\r\n    const provider = useContext(providerContext);\r\n    const [isOwner, setIsOwner] = useState(null);\r\n    const [currentState, setCurrentState] = useState(null);\r\n    const [voter, setVoter] = useState(null);\r\n    const [winner, setWinner] = useState(null);\r\n    const [proposals, setProposals] = useState([]);    \r\n\r\n\tuseEffect(async () => {\r\n        await getCurrentVotingStatus();\r\n\r\n\t\tawait getOwner();\r\n\r\n        await getVoter(); \r\n        \r\n        await getWinner();\r\n\r\n        provider.contract.events.WorkflowStatusChanged(null, (error, event) => {\r\n            if(!error){\r\n                console.log(\"WorkflowStatusChanged\");\r\n                setCurrentState(event.returnValues.newStatus);\r\n                getWinner();\r\n            }\r\n        });\r\n        provider.contract.events.Voted(null, (error, event) => {\r\n            if(!error){\r\n                console.log(\"Voted\");\r\n                const hasVoted = (event.returnValues.voter == provider.accounts[0]);\r\n                setVoter({hasVoted: hasVoted});\r\n            }\r\n        });\r\n\r\n        // provider.contract.events.ProposalRegistered(null, async (error, event) => {\r\n        //     if(!error){\r\n        //         // const proposalId = event.returnValues.proposalId;\r\n        //         // const proposalresponse = await provider.contract.methods.proposals(proposalId).call({from: provider.accounts[0]});\r\n        //         // setProposals({proposalId: proposalId, proposalDescription: proposalresponse.description});\r\n        //         console.log(\"ProposalRegistered\");\r\n        //         const idProposal = event.returnValues.proposalId;\r\n        //         const proposalResponse = await provider.contract.methods.proposals(idProposal).call();\r\n        //         const proposalToAdd = {proposalId: idProposal, proposalDescription: proposalResponse.description}\r\n        //         if(proposals.indexOf(proposalResponse.description) == -1)\r\n        //             setProposals(proposals => [...proposals, proposalToAdd]);  \r\n        //     }\r\n        // });\r\n\r\n\t}, []);\r\n\r\n    \r\n\r\n    const getVoter = async () => {\r\n        try{\r\n          const voterObject = await provider.contract.methods.voters(provider.accounts[0]).call({from: provider.accounts[0]});\r\n          setVoter(voterObject);\r\n        }\r\n        catch(error){\r\n          if(error){\r\n            console.log(error);\r\n          }\r\n        }\r\n    }\r\n\r\n    const getOwner = async () => {\r\n        try{\r\n            const owner = await provider.contract.methods.owner().call();\r\n            setIsOwner(owner === provider.accounts[0]);\r\n        }\r\n        catch(error){\r\n          if(error){\r\n            console.log(error);\r\n          }\r\n        }\r\n    }\r\n\r\n    const getWinner = async () => {\r\n        try{\r\n\r\n            const winnerResponse = await provider.contract.methods.getWinner().call();\r\n            setWinner(winnerResponse);   \r\n        }\r\n        catch(error){\r\n          if(error){\r\n            console.log(error);\r\n            setWinner({winnerProposalDescription: \"No winner determinated\"});\r\n          }\r\n        }\r\n    }\r\n\r\n    const getCurrentVotingStatus = async () => {\r\n        try {\r\n            const state = await provider.contract.methods.getCurrentVotingStatus().call();\r\n            setCurrentState(state);\r\n            if(state == '5')\r\n            {\r\n                await getWinner();\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } \r\n    };\r\n\r\n    if (!provider || !currentState || isOwner == null)\r\n        return null;\r\n\r\n    return ( \r\n        <div>\r\n            <div class=\"header-app\">\r\n                <h1>Voting System</h1>\r\n            </div>\r\n            <winnerContext.Provider value={winner}>\r\n                <providerContext.Provider value={provider}>\r\n                    <statusContext.Provider value={currentState}>\r\n                        <proposalsContext.Provider value={proposals}>\r\n                            <voterContext.Provider value={voter}>          \r\n                                <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                                    <CurrentStatusComponent isOwner={isOwner} currentState={currentState} voter={voter}/>\r\n                                </div>\r\n                                <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                                    <InformationsComponent isOwner={isOwner} voter={voter}/>\r\n                                </div>\r\n                                <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                                    <VotingComponents isOwner={isOwner} currentState={currentState} proposals={proposals} voter={voter} winner={winner}/>\r\n                                </div>\r\n                                <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                                    <ResultsComponent winner={winner}/>\r\n                                </div>\r\n                            </voterContext.Provider>\r\n                        </proposalsContext.Provider>\r\n                    </statusContext.Provider>\r\n                </providerContext.Provider>\r\n            </winnerContext.Provider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainComponent;","import React, { Component, useState, useEffect, createContext } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport MainComponent from \"./components/MainComponent\";\n\nexport const providerContext = createContext({web3: null, accounts: null, contract: null});\n\nconst App = () => {\n//   const [web3, setWeb3] = useState(null);\n//   const [accounts, setAccounts] = useState(null);\n//   const [contract, setContract] = useState(null);\n\n  const [provider, setProvider] = useState();\n\n  useEffect( async () => {\n\ttry {\n\t\tawait initialize();\t\n\n\t\t// window.ethereum.on('accountsChanged', async () => {\n\t\t// \t// //window.location.reload();\n\t\t// \t// const callWeb3 = await getWeb3();\n\t\t// \t// const accountsResponse = await web3.eth.getAccounts();\n\t\t// \t// setAccounts(null);\n\t\t// \t// setAccounts(accountsResponse);\n\t\t// \tawait initialize();\t\n\t\t// });\n\n\t\twindow.ethereum.on('accountsChanged', async () => {\n\t\t\tconsole.log(\"accountsChanged\");\n\t\t\twindow.location.reload();\n\t\t});\t\n\t} catch (error) {\n\t\t// Catch any errors for any of the above operations.\n\t\talert(\n\t\t  `Failed to load web3, accounts, or contract. Check console for details.`,\n\t\t);\n\t\t\tconsole.error(error);\n\t\t}\n\t}, []);\n\n\tconst initialize = async () => {\n\n\t\tconsole.log(\"start initialize\");\n\n\t\t// Récupérer le provider web3\n\t\tconst callWeb3 = await getWeb3();\n  \n\t\t// Utiliser web3 pour récupérer les comptes de l’utilisateur (MetaMask dans notre cas) \n\t\tconst callAccounts = await callWeb3.eth.getAccounts();\n  \n\t\t// Récupérer l’instance du smart contract “Voting” avec web3 et les informations du déploiement du fichier (client/src/contracts/Voting.json)\n\t\tconst networkId = await callWeb3.eth.net.getId();\n\t\tconst deployedNetwork = VotingContract.networks[networkId];\n\n\t\tconst instance = new callWeb3.eth.Contract(\n\t\t\tVotingContract.abi,\n\t\t  deployedNetwork && deployedNetwork.address,\n\t\t);\n\n\t\t// setWeb3(callWeb3);\n\t\t// setAccounts(callAccounts);\n\t\t// setContract(instance);\n\n\t\tsetProvider({web3: callWeb3, accounts: callAccounts, contract: instance});\n\n\t\t// window.ethereum.on('accountsChanged', () => {\n\t\t// \t//window.location.reload();\n\t\t// \tsetContract(null);\n\t\t// });\t\n\t};\n\n\tif (!provider) {\n\t\treturn <div>Loading Web3, accounts, and contract...</div>;\n\t}\n\telse {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<providerContext.Provider value={provider}>\n\t\t\t\t\t<MainComponent />\n\t\t\t\t</providerContext.Provider>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}